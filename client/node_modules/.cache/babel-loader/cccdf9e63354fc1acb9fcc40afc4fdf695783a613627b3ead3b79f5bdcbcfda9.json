{"ast":null,"code":"const App = () => {\n  const closesA = [22636.46875, 23117.85938, 23032.77734, 23078.72852, 23031.08984, 23774.56641, 22840.13867, 23139.2832, 23723.76953, 23471.87109, 23449.32227, 23331.84766, 22955.66602, 22760.10938, 23264.29102, 22939.39844, 21819.03906, 21651.18359, 21870.875, 21788.20313, 21808.10156, 22220.80469, 24307.8418, 23623.47461, 24565.60156, 24641.27734, 24327.64258, 24829.14844, 24436.35352, 24188.84375, 23947.49219, 23198.12695, 23175.375, 23561.21289, 23522.87109, 23147.35352, 23646.55078, 23475.4668, 22362.67969, 22353.34961, 22435.51367, 22429.75781, 22219.76953, 21718.08008, 20363.02148, 20187.24414, 20632.41016, 22163.94922, 24197.5332, 24746.07422, 24375.96094, 25052.78906, 27423.92969, 26965.87891, 28038.67578, 27767.23633, 28175.81641, 27307.4375, 28333.97266, 27493.28516, 27494.70703, 27994.33008, 27139.88867, 27268.13086, 28348.44141, 28033.5625, 28478.48438, 28411.03516, 28199.30859, 27790.2207, 28168.08984, 28177.98438, 28044.14063, 27925.85938, 27947.79492, 28333.05078, 29652.98047, 30235.05859, 30139.05273, 30399.06641, 30485.69922, 30318.49609, 30315.35547, 29445.04492, 30397.55273, 28822.67969, 28245.98828, 27276.91016, 27817.5, 27591.38477, 27525.33984, 28307.59766, 28422.70117, 29473.78711, 29340.26172, 29248.48828, 29268.80664, 28091.56836, 28680.53711, 29006.30859, 28847.71094, 29534.38477, 28904.62305, 28454.97852, 27694.27344, 27658.77539, 27621.75586, 27000.78906, 26804.99023, 26784.07813, 26930.63867, 27192.69336, 27036.65039, 27398.80273, 26832.20898, 26890.12891, 27129.58594, 26753.82617, 26851.27734, 27225.72656, 26334.81836, 26476.20703, 26719.29102, 26868.35352, 28085.64648, 27745.88477, 27702.34961, 27219.6582, 26819.97266, 27249.58984, 27075.12891, 27119.06641, 25760.09766, 27238.7832, 26345.99805, 26508.2168, 26480.375, 25851.24023, 25940.16797, 25902.5, 25918.72852, 25124.67578, 25576.39453, 26327.46289, 26510.67578, 26336.21289, 26851.0293, 28327.48828, 30027.29688, 29912.28125, 30695.46875, 30548.69531, 30480.26172, 30271.13086, 30688.16406, 30086.24609, 30445.35156, 30477.25195, 30590.07813, 30620.76953, 31156.43945, 30777.58203, 30514.16602, 29909.33789, 30342.26563, 30292.54102, 30171.23438, 30414.4707, 30620.95117, 30391.64648, 31476.04883, 30334.06836, 30295.80664, 30249.13281, 30145.88867, 29856.5625, 29913.92383, 29792.01563, 29908.74414, 29771.80273, 30084.53906, 29176.91602, 29227.39063, 29354.97266, 29210.68945, 29319.24609, 29356.91797, 29275.30859, 29230.11133, 29675.73242, 29151.95898, 29178.67969, 29074.0918, 29042.12695, 29041.85547, 29180.57813, 29765.49219, 29561.49414, 29429.5918, 29397.71484, 29415.96484, 29282.91406, 29408.44336, 29170.34766, 28701.7793, 26664.55078, 26049.55664, 26096.20508, 26189.58398, 26124.14063, 26031.65625, 26431.64063, 26162.37305, 26047.66797, 26008.46289, 26089.69336, 26106.15039, 27727.39258, 27297.26563, 25931.47266, 25800.72461, 25868.79883, 25969.56641, 25812.41602, 25779.98242, 25753.23633, 26240.19531, 25905.6543, 25895.67773, 25832.22656, 25162.6543, 25833.34375, 26228.32422, 26539.67383, 26608.69336, 26568.28125, 26534.1875, 26754.28125, 27211.11719, 27132.00781, 26567.63281, 26579.56836, 26579.39063, 26256.82617, 26298.48047, 26217.25, 26352.7168, 27021.54688, 26911.7207, 26967.91602, 27983.75, 27530.78516, 27429.97852, 27799.39453, 27415.91211, 27946.59766, 27968.83984, 27935.08984, 27583.67773, 27391.01953, 26873.32031, 26756.79883, 26862.375, 26861.70703, 27159.65234, 28519.4668, 28415.74805, 28328.3418, 28719.80664, 29682.94922, 29918.41211, 29993.89648, 33086.23438, 33901.52734, 34502.82031, 34156.64844, 33909.80078, 34089.57422, 34538.48047, 34502.36328, 34667.78125, 35437.25391, 34938.24219, 34732.32422, 35082.19531, 35049.35547, 35037.37109, 35443.5625, 35655.27734, 36693.125, 37313.96875, 37138.05078, 37054.51953, 36502.35547, 35537.64063, 37880.58203, 36154.76953, 36596.68359, 36585.70313, 37386.54688, 37476.95703, 35813.8125, 37432.33984, 37289.62109, 37720.28125, 37796.79297, 37479.12109, 37254.16797, 37831.08594, 37858.49219, 37712.74609, 38688.75, 39476.33203, 39978.39063, 41980.09766, 44080.64844, 43746.44531, 43292.66406, 44166.60156, 43725.98438, 43779.69922, 41243.83203, 41450.22266, 42890.74219, 43023.97266, 41929.75781, 42240.11719, 41364.66406, 42623.53906, 42270.52734, 43652.25, 43869.15234, 43997.90234, 43739.54297, 43016.11719, 43613.14063, 42520.40234, 43442.85547, 42627.85547, 42099.40234, 42156.90234, 42265.1875, 44167.33203, 44957.96875, 42848.17578, 44179.92188, 44162.69141, 43989.19531, 43943.09766, 46970.50391, 46139.73047, 46627.77734, 46368.58594, 42853.16797, 42842.38281, 41796.26953, 42511.96875, 43154.94531, 42742.65234, 41262.05859, 41618.40625, 41665.58594, 41545.78516, 39507.36719, 39845.55078, 40159.94141];\n  const closesB = [242.039993, 240.610001, 248, 248.160004, 242.710007, 247.809998, 252.75, 264.600006, 258.350006, 256.769989, 267.559998, 266.730011, 263.619995, 263.100006, 271.320007, 272.170013, 269.320007, 262.149994, 258.059998, 252.669998, 251.509995, 254.770004, 249.220001, 250.160004, 249.419998, 246.270004, 251.110001, 255.289993, 256.869995, 254.149994, 253.699997, 252.320007, 248.589996, 253.919998, 260.790009, 265.440002, 276.200012, 279.429993, 272.230011, 273.779999, 272.290009, 277.660004, 280.570007, 276.380005, 275.230011, 280.51001, 284.049988, 288.299988, 287.230011, 287.179993, 284.339996, 291.600006, 289.390015, 282.829987, 283.48999, 289.839996, 286.140015, 288.799988, 288.369995, 288.450012, 286.109985, 285.76001, 281.769989, 275.420013, 295.369995, 304.829987, 307.26001, 305.559998, 305.410004, 304.399994, 305.410004, 310.649994, 308.649994, 307, 312.309998, 310.109985, 308.970001, 309.459991, 311.73999, 314, 318.519989, 318.339996, 321.179993, 315.26001, 313.850006, 325.920013, 332.890015, 331.209991, 328.390015, 332.579987, 335.399994, 335.940002, 333.679993, 323.380005, 325.26001, 326.790009, 331.850006, 334.290009, 337.339996, 348.100006, 342.329987, 338.049988, 333.559998, 339.709991, 335.019989, 328.600006, 334.570007, 335.850006, 335.049988, 340.540009, 337.98999, 338.149994, 341.269989, 337.220001, 331.829987, 332.470001, 337.200012, 342.660004, 345.23999, 345.730011, 359.48999, 355.079987, 346.869995, 343.769989, 345.109985, 350.980011, 337.769989, 330.720001, 338.369995, 335.920013, 336.339996, 327.5, 326.660004, 327.779999, 330.109985, 326.049988, 322.230011, 322.929993, 321.01001, 324.040009, 321.859985, 320.399994, 316.880005, 316.480011, 321.880005, 322.459991, 327, 319.970001, 322.980011, 323.700012, 328.410004, 328.790009, 327.76001, 328.660004, 333.549988, 332.880005, 329.910004, 334.269989, 337.940002, 331.769989, 336.059998, 338.700012, 330.220001, 329.059998, 328.649994, 320.769989, 319.529999, 317.01001, 317.540009, 312.140015, 312.790009, 313.640015, 315.75, 321.799988, 313.390015, 318.959991, 319.359985, 327.26001, 329.820007, 328.390015, 332.420013, 331.160004, 327.730011, 332.640015, 332.059998, 330.109985, 331.320007, 326.670013, 329.320007, 330.529999, 340.670013, 327.890015, 329.809998, 337.309998, 338.109985, 346.070007, 348.320007, 352.799988, 356.529999, 360.529999, 363.200012, 360.690002, 369.670013, 366.679993, 370.269989, 369.670013, 376.170013, 369.850006, 377.440002, 373.070007, 377.850006, 377.429993, 378.609985, 382.700012, 378.850006, 378.910004, 374.51001, 369.140015, 372.519989, 368.799988, 370.950012, 374.230011, 371.299988, 374.380005, 374.369995, 365.929993, 370.730011, 372.649994, 373.26001, 370.619995, 373.540009, 374.579987, 374.660004, 374.070007, 375.279999, 376.040009, 370.869995, 370.600006, 367.940002, 367.75, 374.690002, 375.790009, 382.769989, 384.630005, 388.470001, 390.269989, 389.470001, 393.869995, 398.670013, 396.51001, 398.899994];\n  const userRiskA = 2.5;\n  const userRiskB = 7.5;\n  const returnsA = calculateDailyReturns(closesA);\n  const returnsB = calculateDailyReturns(closesB);\n  const minDays = Math.min(returnsA.length, returnsB.length);\n  const truncatedReturnsA = returnsA.slice(0, minDays);\n  const truncatedReturnsB = returnsB.slice(0, minDays);\n  const meanReturnA = calculateMeanReturn(truncatedReturnsA);\n  const meanReturnB = calculateMeanReturn(truncatedReturnsB);\n  const deviationsA = calculateDeviations(truncatedReturnsA, meanReturnA);\n  const deviationsB = calculateDeviations(truncatedReturnsB, meanReturnB);\n  const covarianceAB = calculateCovariance(deviationsA, deviationsB);\n  let bestReturnHigherRisk = {\n    portfolioReturn: -Infinity,\n    portfolioVariance: -Infinity,\n    weights: {\n      weightA: 0,\n      weightB: 0\n    }\n  };\n  for (let weightA = 1; weightA <= 10; weightA += 0.5) {\n    for (let weightB = 1; weightB <= 10; weightB += 0.5) {\n      const totalWeight = weightA + weightB;\n      const normalizedWeightA = weightA / totalWeight;\n      const normalizedWeightB = weightB / totalWeight;\n      const portfolioReturn = normalizedWeightA * meanReturnA + normalizedWeightB * meanReturnB;\n      const portfolioVariance = normalizedWeightA ** 2 * (userRiskA / 10) ** 2 + normalizedWeightB ** 2 * (userRiskB / 10) ** 2 + 2 * normalizedWeightA * normalizedWeightB * covarianceAB;\n      if (portfolioReturn > bestReturnHigherRisk.portfolioReturn && portfolioVariance > bestReturnHigherRisk.portfolioVariance) {\n        bestReturnHigherRisk = {\n          portfolioReturn,\n          portfolioVariance,\n          weights: {\n            weightA: Math.min(Math.max(Math.round(normalizedWeightA * 20) / 2, 1), 10),\n            weightB: Math.min(Math.max(Math.round(normalizedWeightB * 20) / 2, 1), 10)\n          }\n        };\n      }\n    }\n  }\n  const userWeightA = userRiskA / 10 * 10;\n  const userWeightB = userRiskB / 10 * 10;\n  console.log(\"Mean Return A:\", meanReturnA);\n  console.log(\"Mean Return B:\", meanReturnB);\n  console.log(\"Covariance between Asset A and Asset B:\", covarianceAB);\n  console.log(\"Best Weights for Higher Return:\", {\n    weightA: bestReturnHigherRisk.weights.weightA,\n    weightB: bestReturnHigherRisk.weights.weightB\n  });\n  console.log(\"Your weights:\", {\n    weightA: userWeightA,\n    weightB: userWeightB\n  });\n  const portfolioReturn = userWeightA * meanReturnA + userWeightB * meanReturnB;\n  console.log(`Portfolio Return based on your weight: ${parseFloat(portfolioReturn.toFixed(2))}%`);\n  const portfolioReturnBasedOnBestWeights = bestReturnHigherRisk.weights.weightA * meanReturnA + bestReturnHigherRisk.weights.weightB * meanReturnB;\n  console.log(`Portfolio Return based on best weights: ${parseFloat(portfolioReturnBasedOnBestWeights.toFixed(2))}%`);\n  const portfolioVariance = bestReturnHigherRisk.weights.weightA ** 2 * (userRiskA / 10) ** 2 + bestReturnHigherRisk.weights.weightB ** 2 * (userRiskB / 10) ** 2 + 2 * bestReturnHigherRisk.weights.weightA * bestReturnHigherRisk.weights.weightB * covarianceAB;\n  console.log(\"Portfolio Variance:\", portfolioVariance);\n};\n_c = App;\nconst calculateDailyReturns = closes => {\n  return closes.slice(1).map((close, index) => {\n    const previousClose = closes[index];\n    return (close - previousClose) / previousClose * 100;\n  });\n};\nconst calculateMeanReturn = array => {\n  const sum = array.reduce((acc, returnVal) => acc + returnVal, 0);\n  return sum / array.length;\n};\nconst calculateDeviations = (array, mean) => {\n  return array.map(returnVal => returnVal - mean);\n};\nconst calculateCovariance = (array1, array2) => {\n  const n = array1.length;\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += array1[i] * array2[i];\n  }\n  return sum / (n - 1);\n};\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["App","closesA","closesB","userRiskA","userRiskB","returnsA","calculateDailyReturns","returnsB","minDays","Math","min","length","truncatedReturnsA","slice","truncatedReturnsB","meanReturnA","calculateMeanReturn","meanReturnB","deviationsA","calculateDeviations","deviationsB","covarianceAB","calculateCovariance","bestReturnHigherRisk","portfolioReturn","Infinity","portfolioVariance","weights","weightA","weightB","totalWeight","normalizedWeightA","normalizedWeightB","max","round","userWeightA","userWeightB","console","log","parseFloat","toFixed","portfolioReturnBasedOnBestWeights","_c","closes","map","close","index","previousClose","array","sum","reduce","acc","returnVal","mean","array1","array2","n","i","$RefreshReg$"],"sources":["C:/Users/Alex/Desktop/Licenta/Proiect/Placeholder/client/src/pages/Invest.js"],"sourcesContent":["const App = () => {\r\n  const closesA = [\r\n    22636.46875, 23117.85938, 23032.77734, 23078.72852, 23031.08984,\r\n    23774.56641, 22840.13867, 23139.2832, 23723.76953, 23471.87109, 23449.32227,\r\n    23331.84766, 22955.66602, 22760.10938, 23264.29102, 22939.39844,\r\n    21819.03906, 21651.18359, 21870.875, 21788.20313, 21808.10156, 22220.80469,\r\n    24307.8418, 23623.47461, 24565.60156, 24641.27734, 24327.64258, 24829.14844,\r\n    24436.35352, 24188.84375, 23947.49219, 23198.12695, 23175.375, 23561.21289,\r\n    23522.87109, 23147.35352, 23646.55078, 23475.4668, 22362.67969, 22353.34961,\r\n    22435.51367, 22429.75781, 22219.76953, 21718.08008, 20363.02148,\r\n    20187.24414, 20632.41016, 22163.94922, 24197.5332, 24746.07422, 24375.96094,\r\n    25052.78906, 27423.92969, 26965.87891, 28038.67578, 27767.23633,\r\n    28175.81641, 27307.4375, 28333.97266, 27493.28516, 27494.70703, 27994.33008,\r\n    27139.88867, 27268.13086, 28348.44141, 28033.5625, 28478.48438, 28411.03516,\r\n    28199.30859, 27790.2207, 28168.08984, 28177.98438, 28044.14063, 27925.85938,\r\n    27947.79492, 28333.05078, 29652.98047, 30235.05859, 30139.05273,\r\n    30399.06641, 30485.69922, 30318.49609, 30315.35547, 29445.04492,\r\n    30397.55273, 28822.67969, 28245.98828, 27276.91016, 27817.5, 27591.38477,\r\n    27525.33984, 28307.59766, 28422.70117, 29473.78711, 29340.26172,\r\n    29248.48828, 29268.80664, 28091.56836, 28680.53711, 29006.30859,\r\n    28847.71094, 29534.38477, 28904.62305, 28454.97852, 27694.27344,\r\n    27658.77539, 27621.75586, 27000.78906, 26804.99023, 26784.07813,\r\n    26930.63867, 27192.69336, 27036.65039, 27398.80273, 26832.20898,\r\n    26890.12891, 27129.58594, 26753.82617, 26851.27734, 27225.72656,\r\n    26334.81836, 26476.20703, 26719.29102, 26868.35352, 28085.64648,\r\n    27745.88477, 27702.34961, 27219.6582, 26819.97266, 27249.58984, 27075.12891,\r\n    27119.06641, 25760.09766, 27238.7832, 26345.99805, 26508.2168, 26480.375,\r\n    25851.24023, 25940.16797, 25902.5, 25918.72852, 25124.67578, 25576.39453,\r\n    26327.46289, 26510.67578, 26336.21289, 26851.0293, 28327.48828, 30027.29688,\r\n    29912.28125, 30695.46875, 30548.69531, 30480.26172, 30271.13086,\r\n    30688.16406, 30086.24609, 30445.35156, 30477.25195, 30590.07813,\r\n    30620.76953, 31156.43945, 30777.58203, 30514.16602, 29909.33789,\r\n    30342.26563, 30292.54102, 30171.23438, 30414.4707, 30620.95117, 30391.64648,\r\n    31476.04883, 30334.06836, 30295.80664, 30249.13281, 30145.88867, 29856.5625,\r\n    29913.92383, 29792.01563, 29908.74414, 29771.80273, 30084.53906,\r\n    29176.91602, 29227.39063, 29354.97266, 29210.68945, 29319.24609,\r\n    29356.91797, 29275.30859, 29230.11133, 29675.73242, 29151.95898,\r\n    29178.67969, 29074.0918, 29042.12695, 29041.85547, 29180.57813, 29765.49219,\r\n    29561.49414, 29429.5918, 29397.71484, 29415.96484, 29282.91406, 29408.44336,\r\n    29170.34766, 28701.7793, 26664.55078, 26049.55664, 26096.20508, 26189.58398,\r\n    26124.14063, 26031.65625, 26431.64063, 26162.37305, 26047.66797,\r\n    26008.46289, 26089.69336, 26106.15039, 27727.39258, 27297.26563,\r\n    25931.47266, 25800.72461, 25868.79883, 25969.56641, 25812.41602,\r\n    25779.98242, 25753.23633, 26240.19531, 25905.6543, 25895.67773, 25832.22656,\r\n    25162.6543, 25833.34375, 26228.32422, 26539.67383, 26608.69336, 26568.28125,\r\n    26534.1875, 26754.28125, 27211.11719, 27132.00781, 26567.63281, 26579.56836,\r\n    26579.39063, 26256.82617, 26298.48047, 26217.25, 26352.7168, 27021.54688,\r\n    26911.7207, 26967.91602, 27983.75, 27530.78516, 27429.97852, 27799.39453,\r\n    27415.91211, 27946.59766, 27968.83984, 27935.08984, 27583.67773,\r\n    27391.01953, 26873.32031, 26756.79883, 26862.375, 26861.70703, 27159.65234,\r\n    28519.4668, 28415.74805, 28328.3418, 28719.80664, 29682.94922, 29918.41211,\r\n    29993.89648, 33086.23438, 33901.52734, 34502.82031, 34156.64844,\r\n    33909.80078, 34089.57422, 34538.48047, 34502.36328, 34667.78125,\r\n    35437.25391, 34938.24219, 34732.32422, 35082.19531, 35049.35547,\r\n    35037.37109, 35443.5625, 35655.27734, 36693.125, 37313.96875, 37138.05078,\r\n    37054.51953, 36502.35547, 35537.64063, 37880.58203, 36154.76953,\r\n    36596.68359, 36585.70313, 37386.54688, 37476.95703, 35813.8125, 37432.33984,\r\n    37289.62109, 37720.28125, 37796.79297, 37479.12109, 37254.16797,\r\n    37831.08594, 37858.49219, 37712.74609, 38688.75, 39476.33203, 39978.39063,\r\n    41980.09766, 44080.64844, 43746.44531, 43292.66406, 44166.60156,\r\n    43725.98438, 43779.69922, 41243.83203, 41450.22266, 42890.74219,\r\n    43023.97266, 41929.75781, 42240.11719, 41364.66406, 42623.53906,\r\n    42270.52734, 43652.25, 43869.15234, 43997.90234, 43739.54297, 43016.11719,\r\n    43613.14063, 42520.40234, 43442.85547, 42627.85547, 42099.40234,\r\n    42156.90234, 42265.1875, 44167.33203, 44957.96875, 42848.17578, 44179.92188,\r\n    44162.69141, 43989.19531, 43943.09766, 46970.50391, 46139.73047,\r\n    46627.77734, 46368.58594, 42853.16797, 42842.38281, 41796.26953,\r\n    42511.96875, 43154.94531, 42742.65234, 41262.05859, 41618.40625,\r\n    41665.58594, 41545.78516, 39507.36719, 39845.55078, 40159.94141,\r\n  ];\r\n  const closesB = [\r\n    242.039993, 240.610001, 248, 248.160004, 242.710007, 247.809998, 252.75,\r\n    264.600006, 258.350006, 256.769989, 267.559998, 266.730011, 263.619995,\r\n    263.100006, 271.320007, 272.170013, 269.320007, 262.149994, 258.059998,\r\n    252.669998, 251.509995, 254.770004, 249.220001, 250.160004, 249.419998,\r\n    246.270004, 251.110001, 255.289993, 256.869995, 254.149994, 253.699997,\r\n    252.320007, 248.589996, 253.919998, 260.790009, 265.440002, 276.200012,\r\n    279.429993, 272.230011, 273.779999, 272.290009, 277.660004, 280.570007,\r\n    276.380005, 275.230011, 280.51001, 284.049988, 288.299988, 287.230011,\r\n    287.179993, 284.339996, 291.600006, 289.390015, 282.829987, 283.48999,\r\n    289.839996, 286.140015, 288.799988, 288.369995, 288.450012, 286.109985,\r\n    285.76001, 281.769989, 275.420013, 295.369995, 304.829987, 307.26001,\r\n    305.559998, 305.410004, 304.399994, 305.410004, 310.649994, 308.649994, 307,\r\n    312.309998, 310.109985, 308.970001, 309.459991, 311.73999, 314, 318.519989,\r\n    318.339996, 321.179993, 315.26001, 313.850006, 325.920013, 332.890015,\r\n    331.209991, 328.390015, 332.579987, 335.399994, 335.940002, 333.679993,\r\n    323.380005, 325.26001, 326.790009, 331.850006, 334.290009, 337.339996,\r\n    348.100006, 342.329987, 338.049988, 333.559998, 339.709991, 335.019989,\r\n    328.600006, 334.570007, 335.850006, 335.049988, 340.540009, 337.98999,\r\n    338.149994, 341.269989, 337.220001, 331.829987, 332.470001, 337.200012,\r\n    342.660004, 345.23999, 345.730011, 359.48999, 355.079987, 346.869995,\r\n    343.769989, 345.109985, 350.980011, 337.769989, 330.720001, 338.369995,\r\n    335.920013, 336.339996, 327.5, 326.660004, 327.779999, 330.109985,\r\n    326.049988, 322.230011, 322.929993, 321.01001, 324.040009, 321.859985,\r\n    320.399994, 316.880005, 316.480011, 321.880005, 322.459991, 327, 319.970001,\r\n    322.980011, 323.700012, 328.410004, 328.790009, 327.76001, 328.660004,\r\n    333.549988, 332.880005, 329.910004, 334.269989, 337.940002, 331.769989,\r\n    336.059998, 338.700012, 330.220001, 329.059998, 328.649994, 320.769989,\r\n    319.529999, 317.01001, 317.540009, 312.140015, 312.790009, 313.640015,\r\n    315.75, 321.799988, 313.390015, 318.959991, 319.359985, 327.26001,\r\n    329.820007, 328.390015, 332.420013, 331.160004, 327.730011, 332.640015,\r\n    332.059998, 330.109985, 331.320007, 326.670013, 329.320007, 330.529999,\r\n    340.670013, 327.890015, 329.809998, 337.309998, 338.109985, 346.070007,\r\n    348.320007, 352.799988, 356.529999, 360.529999, 363.200012, 360.690002,\r\n    369.670013, 366.679993, 370.269989, 369.670013, 376.170013, 369.850006,\r\n    377.440002, 373.070007, 377.850006, 377.429993, 378.609985, 382.700012,\r\n    378.850006, 378.910004, 374.51001, 369.140015, 372.519989, 368.799988,\r\n    370.950012, 374.230011, 371.299988, 374.380005, 374.369995, 365.929993,\r\n    370.730011, 372.649994, 373.26001, 370.619995, 373.540009, 374.579987,\r\n    374.660004, 374.070007, 375.279999, 376.040009, 370.869995, 370.600006,\r\n    367.940002, 367.75, 374.690002, 375.790009, 382.769989, 384.630005,\r\n    388.470001, 390.269989, 389.470001, 393.869995, 398.670013, 396.51001,\r\n    398.899994,\r\n  ];\r\n\r\n  const userRiskA = 2.5;\r\n  const userRiskB = 7.5;\r\n\r\n  const returnsA = calculateDailyReturns(closesA);\r\n  const returnsB = calculateDailyReturns(closesB);\r\n\r\n  const minDays = Math.min(returnsA.length, returnsB.length);\r\n  const truncatedReturnsA = returnsA.slice(0, minDays);\r\n  const truncatedReturnsB = returnsB.slice(0, minDays);\r\n\r\n  const meanReturnA = calculateMeanReturn(truncatedReturnsA);\r\n  const meanReturnB = calculateMeanReturn(truncatedReturnsB);\r\n\r\n  const deviationsA = calculateDeviations(truncatedReturnsA, meanReturnA);\r\n  const deviationsB = calculateDeviations(truncatedReturnsB, meanReturnB);\r\n\r\n  const covarianceAB = calculateCovariance(deviationsA, deviationsB);\r\n\r\n  let bestReturnHigherRisk = {\r\n    portfolioReturn: -Infinity,\r\n    portfolioVariance: -Infinity,\r\n    weights: { weightA: 0, weightB: 0 },\r\n  };\r\n\r\n  for (let weightA = 1; weightA <= 10; weightA += 0.5) {\r\n    for (let weightB = 1; weightB <= 10; weightB += 0.5) {\r\n      const totalWeight = weightA + weightB;\r\n      const normalizedWeightA = weightA / totalWeight;\r\n      const normalizedWeightB = weightB / totalWeight;\r\n\r\n      const portfolioReturn =\r\n        normalizedWeightA * meanReturnA + normalizedWeightB * meanReturnB;\r\n\r\n      const portfolioVariance =\r\n        normalizedWeightA ** 2 * (userRiskA / 10) ** 2 +\r\n        normalizedWeightB ** 2 * (userRiskB / 10) ** 2 +\r\n        2 * normalizedWeightA * normalizedWeightB * covarianceAB;\r\n\r\n      if (\r\n        portfolioReturn > bestReturnHigherRisk.portfolioReturn &&\r\n        portfolioVariance > bestReturnHigherRisk.portfolioVariance\r\n      ) {\r\n        bestReturnHigherRisk = {\r\n          portfolioReturn,\r\n          portfolioVariance,\r\n          weights: {\r\n            weightA: Math.min(\r\n              Math.max(Math.round(normalizedWeightA * 20) / 2, 1),\r\n              10\r\n            ),\r\n            weightB: Math.min(\r\n              Math.max(Math.round(normalizedWeightB * 20) / 2, 1),\r\n              10\r\n            ),\r\n          },\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  const userWeightA = (userRiskA / 10) * 10;\r\n  const userWeightB = (userRiskB / 10) * 10;\r\n\r\n  console.log(\"Mean Return A:\", meanReturnA);\r\n  console.log(\"Mean Return B:\", meanReturnB);\r\n  console.log(\"Covariance between Asset A and Asset B:\", covarianceAB);\r\n  console.log(\"Best Weights for Higher Return:\", {\r\n    weightA: bestReturnHigherRisk.weights.weightA,\r\n    weightB: bestReturnHigherRisk.weights.weightB,\r\n  });\r\n  console.log(\"Your weights:\", { weightA: userWeightA, weightB: userWeightB });\r\n\r\n  const portfolioReturn = userWeightA * meanReturnA + userWeightB * meanReturnB;\r\n  console.log(\r\n    `Portfolio Return based on your weight: ${parseFloat(\r\n      portfolioReturn.toFixed(2)\r\n    )}%`\r\n  );\r\n\r\n  const portfolioReturnBasedOnBestWeights =\r\n    bestReturnHigherRisk.weights.weightA * meanReturnA +\r\n    bestReturnHigherRisk.weights.weightB * meanReturnB;\r\n  console.log(\r\n    `Portfolio Return based on best weights: ${parseFloat(\r\n      portfolioReturnBasedOnBestWeights.toFixed(2)\r\n    )}%`\r\n  );\r\n\r\n  const portfolioVariance =\r\n    bestReturnHigherRisk.weights.weightA ** 2 * (userRiskA / 10) ** 2 +\r\n    bestReturnHigherRisk.weights.weightB ** 2 * (userRiskB / 10) ** 2 +\r\n    2 *\r\n      bestReturnHigherRisk.weights.weightA *\r\n      bestReturnHigherRisk.weights.weightB *\r\n      covarianceAB;\r\n  console.log(\"Portfolio Variance:\", portfolioVariance);\r\n};\r\n\r\nconst calculateDailyReturns = (closes) => {\r\n  return closes.slice(1).map((close, index) => {\r\n    const previousClose = closes[index];\r\n    return ((close - previousClose) / previousClose) * 100;\r\n  });\r\n};\r\n\r\nconst calculateMeanReturn = (array) => {\r\n  const sum = array.reduce((acc, returnVal) => acc + returnVal, 0);\r\n  return sum / array.length;\r\n};\r\n\r\nconst calculateDeviations = (array, mean) => {\r\n  return array.map((returnVal) => returnVal - mean);\r\n};\r\n\r\nconst calculateCovariance = (array1, array2) => {\r\n  const n = array1.length;\r\n  let sum = 0;\r\n  for (let i = 0; i < n; i++) {\r\n    sum += array1[i] * array2[i];\r\n  }\r\n  return sum / (n - 1);\r\n};\r\nexport default App;\r\n"],"mappings":"AAAA,MAAMA,GAAG,GAAGA,CAAA,KAAM;EAChB,MAAMC,OAAO,GAAG,CACd,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAC/D,WAAW,EAAE,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAC3E,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAC/D,WAAW,EAAE,WAAW,EAAE,SAAS,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAC1E,UAAU,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAC3E,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,SAAS,EAAE,WAAW,EAC1E,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE,WAAW,EAC3E,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAC/D,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE,WAAW,EAC3E,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAC/D,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAC3E,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE,WAAW,EAC3E,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAC3E,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAC/D,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAC/D,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,OAAO,EAAE,WAAW,EACxE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAC/D,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAC/D,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAC/D,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAC/D,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAC/D,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAC/D,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAC/D,WAAW,EAAE,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAC3E,WAAW,EAAE,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE,UAAU,EAAE,SAAS,EACxE,WAAW,EAAE,WAAW,EAAE,OAAO,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EACxE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE,WAAW,EAC3E,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAC/D,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAC/D,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAC/D,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE,WAAW,EAC3E,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,UAAU,EAC3E,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAC/D,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAC/D,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAC/D,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAC3E,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAC3E,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAC3E,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAC/D,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAC/D,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAC/D,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE,WAAW,EAC3E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"},"metadata":{},"sourceType":"module","externalDependencies":[]}